pipeline GoodsPipeline {
    // Define the data processing flow
    GoodsExtractor -> GoodsTextFileInterpreter-> GoodsCSVInterpreter-> GoodsHeaderDeleter-> GoodsColumnDeleter-> GoodsTableInterpreter-> GoodsLoader;

    // Extract data from a specified URL
    block GoodsExtractor oftype HttpExtractor {
        url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46131-0014_00.csv";
    }

    // Interpret text file with specified encoding
    block GoodsTextFileInterpreter oftype TextFileInterpreter {
        encoding: "latin2";
    }

    // Interpret CSV file with specified delimiter
    block GoodsCSVInterpreter oftype CSVInterpreter {
        enclosing: '';
        delimiter: ";";
    }

    // Delete specified rows from the data
    block GoodsHeaderDeleter oftype RowDeleter {
        delete: [row 1, row 2, row 3, row 4, row 5, row 6, row 7, row 8,  row 31448, row 41339];
    }

    // Delete specified columns from the data
    block GoodsColumnDeleter oftype ColumnDeleter {
        delete: [column F, column G, column H, column I, column J,
        column K, column L, column M, column N, column O,
        column P, column Q, column R, column S, column T,
        column U, column V, column W, column X, column Y,
        column Z, column AA, column AB, column AC, column AD,
        column AE, column AF, column AG, column AH, column AI,
        column AJ, column AK, column AL, column AM, column AN,
        column AO, column AP, column AQ, column AR, column AS];
    }

    // Constraint to ensure positive integers
    constraint PositiveConstraint oftype RangeConstraint {
        lowerBound: 1;
    }

    valuetype PositiveInteger oftype integer {
        constraints: [PositiveConstraint];
    }

    // Constraint to allow only specific month names
    constraint MonthConstraint oftype AllowlistConstraint {
        allowlist: ["Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"];
    }

    valuetype ValidMonth oftype text {
        constraints: [MonthConstraint];
    }

    // Constraint to validate goods ID format
    constraint GoodsIDConstraint oftype RegexConstraint {
        regex: /^NST7-[0-9A-Z]{3}$/;
    }

    valuetype ValidGoodsID oftype text {
        constraints: [GoodsIDConstraint];
    }

    // Define the structure of the table
    block GoodsTableInterpreter oftype TableInterpreter {
        header: false;
        columns: [
            "year" oftype PositiveInteger,
            "month" oftype ValidMonth,
            "goods_id" oftype ValidGoodsID,
            "goods_name" oftype text,
            "goods_source" oftype text,
            "abroad" oftype PositiveInteger,
            "total" oftype PositiveInteger
        ];
    }

    // Load the data into a SQLite database
    block GoodsLoader oftype SQLiteLoader {
        table: "goods";
        file: "./goodsTransportedByTrain.sqlite";
    }
}
